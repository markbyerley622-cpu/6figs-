<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>RetardioStrategy‚Ñ¢ Dashboard</title>
  <link rel="stylesheet" href="style.css" />
  <style>
    /* --- Developer Panel (always visible) --- */
    #dev-panel {
      position: fixed;
      top: 50%;
      left: 10px;
      transform: translateY(-50%);
      background: rgba(255, 79, 216, 0.08);
      border: 1px solid #ff4fd8;
      border-radius: 12px 12px 12px 0;
      padding: 10px;
      display: flex;
      flex-direction: column;
      gap: 10px;
      transition: left 0.4s ease, background 0.3s;
      z-index: 9999;
    }

    #dev-panel::after {
      content: "‚öôÔ∏è";
      position: absolute;
      right: -30px;
      top: 50%;
      transform: translateY(-50%);
      background: #ff4fd8;
      color: #000;
      padding: 6px 8px;
      border-radius: 0 6px 6px 0;
      font-size: 14px;
      cursor: pointer;
      box-shadow: 0 0 10px #ff4fd8;
    }

    #dev-panel:hover { left: 10px; background: rgba(255, 79, 216, 0.15); }

    .dev-btn {
      background-color: #ff4fd8;
      border: none;
      color: #000;
      font-weight: bold;
      border-radius: 6px;
      padding: 6px 10px;
      cursor: pointer;
      font-family: 'Courier New', monospace;
    }

    .dev-btn:hover { background-color: #ff9de5; }

    /* --- Chart Styling --- */
    #tradingview-chart {
      margin-top: 40px;
      width: 100%;
      height: 500px;
      border: 1px solid #ff4fd8;
      border-radius: 10px;
      overflow: hidden;
    }

    /* --- Orb Background --- */
    #orbCanvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      background: radial-gradient(circle at center, #1a0018 0%, #0a000a 100%);
    }

    /* --- Magic Eden Logo --- */
    .magic-eden-logo {
      display: block;
      margin: 20px auto;
      width: 30px;
      transition: transform 0.3s ease, filter 0.3s ease;
    }

    .magic-eden-logo:hover {
      transform: scale(1.1);
      filter: drop-shadow(0 0 8px #ff4fd8);
    }

    /* --- NFT Gallery Grid --- */
    .gallery-grid {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px;
      margin-top: 10px;
    }

    /* --- Phantom Connect Button --- */
    #wallet-connect-container {
      position: fixed;
      top: 15px;
      right: 20px;
      z-index: 9999;
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      gap: 4px;
    }

    #connect-wallet-btn {
      background: #ff4fd8;
      color: #000;
      font-weight: bold;
      border: none;
      border-radius: 8px;
      padding: 8px 16px;
      font-family: 'Courier New', monospace;
      cursor: pointer;
      box-shadow: 0 0 12px #ff4fd8;
      transition: all 0.3s ease;
    }

    #connect-wallet-btn:hover {
      background: #ff9de5;
      box-shadow: 0 0 20px #ff9de5;
    }

    #wallet-address-display {
      color: #ff9de5;
      font-family: 'Courier New', monospace;
      font-size: 0.85rem;
      text-shadow: 0 0 6px #ff4fd8;
    }
  </style>
</head>
<body>
  <!-- Particle background -->
  <canvas id="orbCanvas"></canvas>

  <!-- === Phantom Connect Button === -->
  <div id="wallet-connect-container">
    <button id="connect-wallet-btn">Connect Wallet</button>
    <p id="wallet-address-display"></p>
  </div>

  <div class="dashboard">
    <h1>RetardioStrategy‚Ñ¢</h1>
    <h2>NFTStrategy (Solana Edition)</h2>
    <p class="contract">Contract: <span id="contract">Coming soon...</span></p>

<!-- === Project Description === -->
<div class="project-description">
  <img src="retardiologo.png" alt="$RTRDSTR Logo" class="project-logo" />
  <p>
    <strong>$RTRDSTR Machine</strong><br>
    Built on the Solana blockchain, the $RTRDSTR Machine powers the RETARDIO NFT ecosystem. 
    Creator fees generated by the $RTRDSTR token will be used to purchase RETARDIO NFTs from the floor. 
    These NFTs will then be relisted at <strong>1.2√ó</strong> the purchase price. 
    Proceeds from the sales will be used to buy back and burn $RTRDSTR tokens, supporting 
    <strong>deflationary tokenomics</strong>.
  </p>
</div>


    <!-- === Stats === -->
    <div class="stats">
      <div class="stat"><span class="label">Holding</span><span id="holding">0 Retardios</span></div>
      <div class="stat"><span class="label">SOL Price</span><span id="sol-price">$0.00</span></div>
      <div class="stat"><span class="label">$RTSTRDGY Price</span><span id="token-price">$0.0000</span></div>
      <div class="stat"><span class="label">Liquidity</span><span id="market-cap">$0.00M</span></div>
      <div class="stat"><span class="label">Burned Amount</span><span id="burned">0 (0.00%)</span></div>
      <div class="stat"><span class="label">24h Change</span><span id="change">-0.00%</span></div>
    </div>

    <!-- === Treasury Section === -->
    <div class="treasury">
      <h3>Treasury Holdings</h3>
      <p>Wallet: <span id="wallet-address">Insert wallet address here</span></p>
      <p>NFTs held: <span id="nft-count">0</span></p>
    </div>

    <!-- === Progress Section === -->
    <div class="progress-section">
      <h3>Progress to Next Purchase</h3>
      <div class="progress-bar"><div class="progress-fill" id="progress-fill" style="width: 0%;"></div></div>
      <p id="progress-percent">0%</p>
      <p>When the machine acquires the missing <span id="missing-sol">0.0000</span> SOL, the first entity to trigger the mechanism will process the system forward and earn a reward.</p>
      <p><strong>Need:</strong> <span id="need-sol">0.000</span> more SOL</p>
      <p class="note">No SOL to convert</p>
    </div>

   <!-- === DexScreener Chart === -->
   <div id="tradingview-chart"></div>

   <!-- === Treasury NFT Gallery === -->
   <div class="gallery">
     <div class="gallery-header">
       <h3>Treasury NFT Gallery</h3>
       <a href="https://magiceden.io/marketplace/retardio_cousins" target="_blank">
         <img src="magiceden-logo.png" alt="Magic Eden" class="magic-eden-logo" />
       </a>
     </div>

     <p id="gallery-summary">RetardioStrategy‚Ñ¢ is currently holding 0 NFTs</p>
     <input type="file" id="nft-upload" accept="image/*" style="display:none" multiple />
     <div id="gallery-grid" class="gallery-grid"></div>
   </div>

   <!-- === Token Loader (Hidden) === -->
   <div id="token-loader" style="display:none; margin:20px 0;">
     <label for="token-contract">Paste DexScreener/Token CA:</label>
     <input type="text" id="token-contract" placeholder="Enter contract address or token symbol" />
     <button id="load-token">Load Token</button>
   </div>

   <!-- === Dev Panel (Hidden by Default) === -->
   <div id="dev-panel" style="display:none;">
     <button id="u1" class="dev-btn">u1</button>
     <button id="s1" class="dev-btn">s1</button>
     <button id="pa" class="dev-btn">pa</button>
   </div>

   <!-- === Sold NFT Gallery === -->
   <div class="gallery">
     <div class="gallery-header">
       <h3>Sold NFTs</h3>
     </div>

     <p id="sold-summary">RetardioStrategy‚Ñ¢ has sold 0 NFTs</p>
     <input type="file" id="sold-upload" accept="image/*" style="display:none" multiple />
     <div id="sold-grid" class="gallery-grid"></div>
   </div>
  </div>

<!-- === JS === -->
<script>

  // === Load global chart ===
  async function loadTradingViewChart(pairAddress) {
    const chartContainer = document.getElementById("tradingview-chart");
    chartContainer.innerHTML = "";
    const iframe = document.createElement("iframe");
    iframe.src = `https://dexscreener.com/solana/${pairAddress}?embed=1&theme=dark`;
    iframe.width = "100%";
    iframe.height = "500";
    iframe.style.border = "0";
    iframe.allowFullscreen = true;
    chartContainer.appendChild(iframe);
  }

  async function fetchChart() {
    try {
      const res = await fetch("/chart");
      const data = await res.json();
      if (data?.address) {
        loadTradingViewChart(data.address);
        document.getElementById("contract").textContent = data.address;
      }
    } catch (e) {
      console.error("Error loading chart:", e);
    }
  }

  fetchChart();

  // === Dev Unlock (Ctrl+D) ===
  window.addEventListener("keydown", (e) => {
    if (e.ctrlKey && e.key.toLowerCase() === "d") {
      const key = prompt("Enter developer key:");
      if (key === "RetardioDev123") {
        devUnlocked = true;
        document.getElementById("dev-panel").style.display = "flex";
        alert("Developer mode unlocked üîì");
      } else {
        alert("Access denied üö´");
      }
    }
  });

  // === Global Treasury Gallery Load ===
async function loadGallery() {
  try {
    const res = await fetch("/gallery");
    const data = await res.json();
    const grid = document.getElementById("gallery-grid");
    grid.innerHTML = "";

    data.forEach((nft) => {
      // --- NFT Card ---
      const card = document.createElement("div");
      card.className = "nft-card";

      const img = document.createElement("img");
      img.src = nft.url || "placeholder.png"; // fallback if URL missing
      img.alt = nft.name;
      img.className = "nft-img";

      const info = document.createElement("div");
      info.className = "nft-info";

      const name = document.createElement("p");
      name.textContent = nft.name;
      name.className = "nft-name";

      const price = document.createElement("p");
      price.textContent = `Listing Price: ${nft.price} SOL`;
      price.className = "nft-price";

const viewBtn = document.createElement("button"); 
viewBtn.textContent = "View Listing";
viewBtn.className = "view-btn";
viewBtn.onclick = () => {
  window.open(`https://magiceden.io/item-details/${encodeURIComponent(nft.id)}`, "_blank");
};



      // --- Developer delete/sold logic ---
      card.addEventListener("click", async (e) => {
        if (!devUnlocked) return;
        if (e.target !== card) return; // avoid triggering when clicking button

        const confirmAction = confirm(`üßπ Remove or sell "${nft.name}"?`);
        if (!confirmAction) return;

        const type = prompt("Type 'delete' to remove, or 'sold' to move to sold gallery:");
        if (!type) return;

        const action = type.trim().toLowerCase();
        if (action === "delete") {
          await fetch("/delete-gallery", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ key: "RetardioDev123", name: nft.name }),
          });
          loadGallery();
        } else if (action === "sold") {
          const soldPrice = prompt("Enter Sold Price (SOL):");
          await fetch("/move-to-sold", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ key: "RetardioDev123", name: nft.name, soldPrice }),
          });
          loadGallery();
          loadSoldGallery();
        }
      });

      grid.appendChild(card);
    });

    document.getElementById("gallery-summary").textContent =
      `RetardioStrategy‚Ñ¢ is currently holding ${data.length} NFTs`;

  } catch (err) {
    console.warn("loadGallery failed:", err);
  }
}

// === Global Sold Gallery Load ===
async function loadSoldGallery() {
  try {
    const res = await fetch("/sold");
    const data = await res.json();
    const grid = document.getElementById("sold-grid");
    grid.innerHTML = "";

    data.forEach((nft) => {
      const img = document.createElement("img");
      img.src = nft.url;
      img.alt = nft.name;
      img.title = `Name: ${nft.name}\nSold For: ${nft.price} SOL`;
      img.style.width = "100px";
      img.style.margin = "5px";
      img.style.cursor = "pointer";

      img.addEventListener("click", async () => {
        if (!devUnlocked) return alert("üö´ Developer mode required.");
        const confirmDelete = confirm(`üßπ Delete sold NFT "${nft.name}"?`);
        if (!confirmDelete) return;

        await fetch("/delete-sold", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ key: "RetardioDev123", name: nft.name }),
        });

        loadSoldGallery();
      });

      grid.appendChild(img);
    });

    document.getElementById("sold-summary").textContent =
      `RetardioStrategy‚Ñ¢ has sold ${data.length} NFTs`;
  } catch (err) {
    console.warn("loadSoldGallery failed:", err);
  }
}


  // === pa (Update global chart) ===
  document.getElementById("pa").addEventListener("click", async () => {
    if (!devUnlocked) return alert("üö´ Developer mode required.");
    const address = prompt("Paste new token contract:");
    if (!address) return;
    const res = await fetch("/update-chart", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ key: "RetardioDev123", address }),
    });
    const data = await res.json();
    if (data.success) {
      alert("‚úÖ Chart updated globally!");
      fetchChart();
    } else {
      alert("‚ùå Failed to update chart.");
    }
  });

  // === u1 (Upload Treasury NFTs - GLOBAL) ===
  document.getElementById("u1").addEventListener("click", () => {
    if (!devUnlocked) return alert("üö´ Developer mode required.");
    const fileInput = document.getElementById("nft-upload");
    fileInput.click();
    fileInput.onchange = async () => {
      const formData = new FormData();
      for (const file of fileInput.files) {
        const name = prompt("Enter NFT Name:");
        const price = prompt("Enter Listing Price (SOL):");
        formData.append("images", file);
        formData.append("meta", JSON.stringify({ name, price }));
      }
      const res = await fetch("/upload-gallery", { method: "POST", body: formData });
      const data = await res.json();
      if (data.success) {
        alert("‚úÖ Treasury NFT uploaded globally!");
        loadGallery();
      } else {
        alert("‚ùå Upload failed.");
      }
    };
  });

  // === s1 (Upload Sold NFTs - GLOBAL) ===
  document.getElementById("s1").addEventListener("click", () => {
    if (!devUnlocked) return alert("üö´ Developer mode required.");
    const fileInput = document.getElementById("sold-upload");
    fileInput.click();
    fileInput.onchange = async () => {
      const formData = new FormData();
      for (const file of fileInput.files) {
        const name = prompt("Enter Sold NFT Name:");
        const price = prompt("Enter Sold Price (SOL):");
        formData.append("images", file);
        formData.append("meta", JSON.stringify({ name, price }));
      }
      const res = await fetch("/upload-sold", { method: "POST", body: formData });
      const data = await res.json();
      if (data.success) {
        alert("‚úÖ Sold NFT uploaded globally!");
        loadSoldGallery();
      } else {
        alert("‚ùå Upload failed.");
      }
    };
  });



  // === Purple Orbs Background ===
  const canvas = document.getElementById("orbCanvas");
  const ctx = canvas.getContext("2d");
  function resizeCanvas() { canvas.width = window.innerWidth; canvas.height = window.innerHeight; }
  resizeCanvas();

  class Orb {
    constructor() {
      this.x = Math.random() * canvas.width;
      this.y = Math.random() * canvas.height;
      this.size = 40 + Math.random() * 60;
      this.dx = (Math.random() - 0.5) * 0.5;
      this.dy = (Math.random() - 0.5) * 0.5;
      this.opacity = 0.1 + Math.random() * 0.2;
    }
    draw() {
      ctx.beginPath();
      ctx.fillStyle = `rgba(255, 79, 216, ${this.opacity})`;
      ctx.shadowColor = "#ff4fd8";
      ctx.shadowBlur = 40;
      ctx.arc(this.x, this.y, this.size, 0, Math.PI*2);
      ctx.fill();
      ctx.shadowBlur = 0;
    }
    update() {
      this.x += this.dx;
      this.y += this.dy;
      if (this.x < 0 || this.x > canvas.width) this.dx *= -1;
      if (this.y < 0 || this.y > canvas.height) this.dy *= -1;
      this.draw();
    }
  }

  const orbs = Array.from({ length: 15 }, () => new Orb());
  function animate() {
    ctx.fillStyle = "rgba(10,0,10,0.3)";
    ctx.fillRect(0,0,canvas.width,canvas.height);
    orbs.forEach(o => o.update());
    requestAnimationFrame(animate);
  }
  animate();
  window.addEventListener("resize", resizeCanvas);
</script>

<!-- === Phantom Wallet Connect === -->
<script>
const connectBtn = document.getElementById("connect-wallet-btn");
const walletDisplay = document.getElementById("wallet-address-display");

// --- Connect Phantom ---
async function connectPhantom() {
  try {
    if (!window.solana || !window.solana.isPhantom) {
      alert("Phantom Wallet not found. Please install it from https://phantom.app/");
      return;
    }

    const resp = await window.solana.connect();
    const address = resp.publicKey.toString();

    walletDisplay.textContent = address.slice(0, 4) + "..." + address.slice(-4);
    connectBtn.textContent = "Disconnect ‚ùå";
    connectBtn.dataset.connected = "true"; // Track connection state
    connectBtn.style.opacity = 0.8;

    localStorage.setItem("phantomWallet", address);
    console.log("Connected wallet:", address);
  } catch (err) {
    console.error("Connection failed:", err);
    alert("Wallet connection failed or rejected.");
  }
}

// --- Disconnect Phantom ---
async function disconnectPhantom() {
  try {
    if (window.solana && window.solana.isPhantom) {
      await window.solana.disconnect();
    }
  } catch (err) {
    console.warn("Manual disconnect error:", err);
  }

  // Reset UI and storage
  localStorage.removeItem("phantomWallet");
  walletDisplay.textContent = "Not Connected";
  connectBtn.textContent = "Connect Wallet";
  connectBtn.dataset.connected = "false";
  connectBtn.disabled = false;
  connectBtn.style.opacity = 1;
  console.log("Wallet disconnected.");
}

// --- Click Toggle (Connect / Disconnect) ---
connectBtn.addEventListener("click", async () => {
  const isConnected = connectBtn.dataset.connected === "true";
  if (isConnected) {
    await disconnectPhantom();
  } else {
    await connectPhantom();
  }
});

// --- Auto-load if previously connected ---
window.addEventListener("load", async () => {
  const saved = localStorage.getItem("phantomWallet");

  if (window.solana && window.solana.isPhantom) {
    const provider = window.solana;

    const alreadyConnected = await provider.connect({ onlyIfTrusted: true }).catch(() => null);
    if (alreadyConnected && alreadyConnected.publicKey) {
      const address = alreadyConnected.publicKey.toString();
      walletDisplay.textContent = address.slice(0, 4) + "..." + address.slice(-4);
      connectBtn.textContent = "Disconnect ‚ùå";
      connectBtn.dataset.connected = "true";
      connectBtn.style.opacity = 0.8;
      localStorage.setItem("phantomWallet", address);
    } else if (saved) {
      walletDisplay.textContent = saved.slice(0, 4) + "..." + saved.slice(-4);
      connectBtn.textContent = "Connect Wallet";
      connectBtn.dataset.connected = "false";
    }
  } else {
    walletDisplay.textContent = "No Phantom Detected";
  }
});
</script>
<script src="script.js"></script>
</body>
</html>
